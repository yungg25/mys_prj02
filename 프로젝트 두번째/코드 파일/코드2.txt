import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.preprocessing import LabelEncoder

# 데이터 로드
file_path = 'C:/Users/Admin/Downloads/data 03.csv'
data = pd.read_csv(file_path)

# 데이터 확인
print(data.head())

# 1. NaN 값 처리 (필요시 NaN 제거)
data.dropna(subset=['Unit_Price', 'Stock_Quantity', 'Sales_Volume', 'Inventory_Turnover_Rate'], inplace=True)

# 2. 텍스트 형식의 데이터를 숫자 형식으로 변환 (예: 'Unit_Price'에 '$' 포함시 처리)
data['Unit_Price'] = data['Unit_Price'].replace({'\$': '', ',': ''}, regex=True).astype(float)

# 3. 'Catagory'와 같은 범주형 데이터를 인코딩 (예시)
le = LabelEncoder()
data['Category_Encoded'] = le.fit_transform(data['Catagory'].astype(str))

# 4. 필요한 특성만 선택하여 X, y 정의
X = data[['Unit_Price', 'Stock_Quantity', 'Inventory_Turnover_Rate', 'Category_Encoded']]
y = data['Sales_Volume']

# 5. 학습용 데이터와 테스트용 데이터로 분리
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# n_estimators 값을 100으로 줄여서 시도해보세요
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# 7. 테스트 데이터로 예측
y_pred = model.predict(X_test)

# 8. 모델 평가 (MAE, RMSE)
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

# 평가 결과 출력
print(f"Mean Absolute Error (MAE): {mae}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
